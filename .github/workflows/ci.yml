name: Android CI/CD

permissions:
  contents: write

on:
  push:
    branches: [ main, master, develop ]
    tags:
      - "v*"   # 打 tag 时触发 Release
  pull_request:
    branches: [ main, master, develop ]

jobs:

  # ===============================================
  # 1️⃣ 日常 CI：单元测试 + Lint + Debug APK + Library AAR
  # ===============================================
  ci:
    name: CI - Test & Build Debug/AAR
    runs-on: ubuntu-latest

    steps:
      # 拉取代码
      - uses: actions/checkout@v4

      # JDK 17
      - uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin"

      # 缓存 Gradle
      - uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # 授权 gradlew
      - run: chmod +x gradlew

      # 单元测试
      - name: Run Unit Tests
        run: ./gradlew test
        continue-on-error: true

      # Lint 检查
      - name: Run Lint
        run: ./gradlew lint
        continue-on-error: true

      # 构建 Debug APK
      - name: Build Debug APK
        run: ./gradlew assembleDebug

      # 构建 Library AAR（如果有 library 模块）
      - name: Build Library AAR
        run: ./gradlew assembleRelease \:permission-core:assembleRelease \:permission-coroutine:assembleRelease
        continue-on-error: true

      - name: Generate performance report
        run: |
          echo "# 性能报告" > performance-report.md
          echo "版本: ${{ steps.get_version.outputs.VERSION }}" >> performance-report.md
          echo "构建时间: $(date)" >> performance-report.md
          echo "" >> performance-report.md
          echo "## 包大小" >> performance-report.md
          echo "- 核心库: $(du -h permission-core/build/outputs/aar/permission-core-release.aar | cut -f1)" >> performance-report.md
          echo "- 协程库: $(du -h permission-coroutine/build/outputs/aar/permission-coroutine-release.aar | cut -f1)" >> performance-report.md
          echo "- 演示应用: $(du -h demo/build/outputs/apk/release/demo-release-unsigned.apk | cut -f1)" >> performance-report.md

      # 上传 Debug APK / AAR 产物
      - name: Upload CI Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ci-artifacts
          path: |
            app/build/outputs/apk/debug/*.apk
            **/build/outputs/aar/*.aar
          if-no-files-found: ignore

  # =================================================================================================
  # 2️⃣ 打 Tag 时自动发布签名 Release APK + AAR    (注意：如果有 keystore secrets，会自动签名，否则为 unsigned)
  # =================================================================================================
  release:
    name: Release - Optional Signed APK + AAR
    runs-on: ubuntu-latest
    needs: [ ci ]
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin"

      # 下载 CI 产物
      - uses: actions/download-artifact@v4
        with:
          name: ci-artifacts
          path: build-artifacts

      # 如果有 keystore secrets，就恢复 keystore
      - name: Restore Keystore (if available)
        run: |
          if [ -n "${{ secrets.KEYSTORE_FILE }}" ]; then
            echo "${{ secrets.KEYSTORE_FILE }}" | base64 --decode > release.jks
          else
            echo "No keystore secret found, skipping..."
          fi

      # 构建 Release APK + AAR（可选签名）
      - name: Build Release APK + AAR
        run: |
          MODULE_TASKS="assembleRelease :permission-core:assembleRelease :permission-coroutine:assembleRelease"

          if [ -f release.jks ]; then
            echo "Signing Release APK with keystore..."
            ./gradlew $MODULE_TASKS \-Pandroid.injected.signing.store.file=release.jks \-Pandroid.injected.signing.store.password=${{ secrets.KEYSTORE_PASSWORD }} \-Pandroid.injected.signing.key.alias=${{ secrets.KEY_ALIAS }} \-Pandroid.injected.signing.key.password=${{ secrets.KEY_PASSWORD }}
          else
            echo "No keystore found, building unsigned release..."
            ./gradlew $MODULE_TASKS


      # 上传 Release APK/AAR 到 GitHub Release
      - name: Publish GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          name: "Release ${{ github.ref_name }}"
          tag_name: ${{ github.ref_name }}
          body: |
            🚀 自动发布版本：**${{ github.ref_name }}**
            - 来源分支: ${{ github.ref_name }}
            - 构建时间: ${{ github.run_started_at }}
          files: build-artifacts/**/*.{apk,aar}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

